from typing import List

from rich.box import MINIMAL
from rich.console import Console
from rich.table import Table

from malwarebazaar.config import Config
from malwarebazaar.models import Sample, YaraRule, Task


def format_none(s: str) -> str:
    return f"[italic bright_black]{s}[/italic bright_black]"


def format_tlp(s: str) -> str:
    l = s.lower()
    if "white" in l or "clear" in l:
        return f"[bold white on black]{s}[/bold white on black]"
    if "green" in l:
        return f"[bold green1 on black]{s}[/bold green1 on black]"
    if "amber" in l:
        return f"[bold orange1 on black]{s}[/bold orange1 on black]"
    if "red" in l:
        return f"[bold red1 on black]{s}[/bold red1 on black]"
    return s


def create_sample_table(s: Sample) -> Table:
    table = Table(show_header=False, box=MINIMAL)
    table.add_column()
    table.add_column(overflow="fold")
    table.add_row("Filename", s.file_name if s.file_name else format_none("None"))
    table.add_row("Filesize", str(s.file_size) + " bytes")
    table.add_row("Filetype", f"{s.file_type_mime}")
    if any([s.first_seen, s.last_seen, s.sightings]):
        table.add_row(
            "Sightings",
            f"First-Seen: {s.first_seen if s.first_seen else format_none('None')}\n"
            f"Last-Seen:  {s.last_seen if s.last_seen else format_none('None')}\n"
            f"Sightings:  {s.sightings if s.sightings else format_none('None')}"
        )
    table.add_row(
        "Hashes",
        f"MD5:\t    {s.md5_hash}\n"
        f"SHA1:\t    {s.sha1_hash}\n"
        f"SHA256:\t    {s.sha256_hash}\n"
        f"SHA3-384:   {s.sha3_384_hash}\n"
        f"Icon Dhash: {s.dhash_icon if s.dhash_icon else format_none('None')}"
    )
    if any([s.imphash, s.gimphash, s.telfhash]):
        table.add_row(
            "Import Hashes",
            f"Imphash:    {s.imphash if s.imphash else format_none('None')}\n"
            f"Gimphash:   {s.gimphash if s.gimphash else format_none('None')}\n"
            f"Telfhash:   {s.telfhash if s.telfhash else format_none('None')}"
        )
    table.add_row(
        "Fuzzy Hashes",
        f"Ssdeep:     {s.ssdeep}\n"
        f"Tlsh:       {s.tlsh}\n"
    )
    if s.signature:
        table.add_row("Signature", s.signature)
    if s.tags:
        table.add_row("Tags", ", ".join(s.tags))

    return table


def print_sample_table(s: Sample, console: Console = Console()):
    console.print(create_sample_table(s))


def print_yararule_table(y: YaraRule, c: Console = Console()):
    table = Table(show_header=False, box=MINIMAL)
    table.add_column()
    table.add_column(overflow="fold")

    table.add_row(
        "Rule Metadata",
        f"Rule name:       {y.rule_name}\n"
        f"Date:            {y.date}\n"
        f"Author:          {y.author}\n"
        f"Description:     {y.description}\n"
        f"Malpedia Family: {y.malpedia_family if y.malpedia_family else format_none('None')}"
    )

    table.add_row(
        "YARAhub Metadata",
        f"Timestamp: {y.time_stamp}\n"
        f"UUID:      {y.yarahub_uuid}\n"
        f"Reference: {y.yarahub_reference_md5}\n"
        f"           {y.yarahub_reference_link if y.yarahub_reference_link else format_none('No reference link given')}"
        f"\nTLP:       Sharing  {format_tlp(y.yarahub_rule_sharing_tlp)}\n"
        f"           Matching {format_tlp(y.yarahub_rule_matching_tlp)}\n"
        f"License:   {y.yarahub_license}"
    )
    c.print(table)


def create_task_table(t: Task, *, include_sample: bool = True) -> Table:
    table = Table(show_header=False, box=MINIMAL)
    table.add_column()
    table.add_column(overflow="fold")
    table.add_row(
        "Task ID",
        t.task_id
    )
    table.add_row(
        "YARAify Parameters",
        f"ClamAV {':heavy_check_mark:' if t.clamav_scan else ':heavy_multiplication_x:'}"
        f" Unpack {':heavy_check_mark:' if t.unpack else ':heavy_multiplication_x:'}"
        f" Share {':heavy_check_mark:' if t.share_file else ':heavy_multiplication_x:'}"
    )
    if include_sample:
        table.add_row(
            "Sample",
            create_sample_table(t.metadata)
        )
    table.add_row(
        "Detections",
        f"Clam-AV:     {', '.join(t.clamav_results) if t.clamav_results else format_none('No Clam-AV results')}\n"
        + "\n".join([
            f"Name:        {r.rule_name}\n"
            f"Author:      {r.author}\n"
            f"Description: {r.description if r.description else format_none('No description provided.')}\n"
            f"TLP:         {format_tlp(r.tlp)}\n"
            for r in t.static_results
        ])
    )
    if t.unpacked_results:
        for unpacked in t.unpacked_results:
            table.add_row(
                "Unpacked file",
                f"Filename: {unpacked.unpacked_file_name}\n"
                f"MD5:      {unpacked.unpacked_md5}\n"
                f"SHA1:     {unpacked.unpacked_sha256}\n"
            )
            table.add_row(
                "Detections",
                "\n".join([
                    f"Name:        {r.rule_name}\n"
                    f"Author:      {r.author}\n"
                    f"Description: {r.description if r.description else format_none('No description provided.')}\n"
                    f"TLP:         {format_tlp(r.tlp)}\n"
                    for r in unpacked.unpacked_yara_matches
                ])
            )
    return table


def print_task_table(t: Task, c: Console = Console(), *, include_sample: bool = True):
    c.print(create_task_table(t, include_sample=include_sample))


def multiple_samples(samples: List[Sample], console: Console = Console()):
    for sample in samples:
        print_sample_table(sample, console)
        console.print()


def csv_output(samples: List[Sample], console: Console = Console()):
    soft_wrap = console.soft_wrap
    console.soft_wrap = True
    columns = Config.get_instance().csv_columns
    console.print("\"", end="")
    console.print("\",\"".join(columns.keys()), end="")
    console.print("\"")
    for idx, sample in enumerate(samples):
        cols = []
        for key in columns.values():
            if not hasattr(sample, key):
                col = "None"
            else:
                col = getattr(sample, key)
            if not col:
                col = "None"
            elif isinstance(col, list):
                col = ",".join(col)
            col = f"\"{col}\""
            cols.append(col)
        console.print(",".join(cols))
    console.soft_wrap = soft_wrap
