import io
from enum import Enum
from json import dumps

from rich.console import Console
from rich.status import Status
from typer import Typer, Option, Argument, Exit

from malwarebazaar.api import Yaraify
from malwarebazaar.config import Config, YARAifyConfig
from malwarebazaar.models import Sample, YaraRule, Task
from malwarebazaar.output import print_sample_table, print_yararule_table, print_task


class QueryTypes(Enum):
    hash = "hash"
    yara = "yara"
    clamav = "clamav"
    imphash = "imphash"
    gimphash = "gimphash"
    icon = "icon"
    tlsh = "tlsh"
    telfhash = "telfhash"


yaraify_app = Typer(name="YARAify cli", help="Query YARAify from your command line!")


@yaraify_app.command(name="init", help="Initialize YARAify cli.")
def init(
        malpedia_key: str = Option(None, "-m", "--malpedia",
                                   help="Optional Malpedia key to use for yara rule searches."),
        api_key: str = Argument(..., help="The API key from your YARAify account.")
):
    c = Config.get_instance()
    c.yaraify = YARAifyConfig(
        api_key=api_key,
        malpedia_key=malpedia_key
    )
    c.save_config()


@yaraify_app.command(name="query", help="Query the YARAify API.")
def query(
        json: bool = Option(False, "-j", "--json", help="Output raw JSON response."),
        limit: int = Option(25, "-l", "--limit", help="Limit the amount of objects returned."),
        query_type: QueryTypes = Argument(..., show_choices=True, help="The type of query to send to the API."),
        query: str = Argument(..., help="The search term to use.")
):
    c, ec = Console(), Console(stderr=True)
    config = Config.get_instance()
    yaraify = Yaraify(
        api_key=config.yaraify.api_key,
        malpedia_key=config.yaraify.malpedia_key
    )

    with Status("Querying YARAify...", ):
        if query_type == QueryTypes.hash:
            data = yaraify.query_hash(query)
        elif query_type == QueryTypes.yara:
            data = yaraify.query_yara_rule(query, limit)
        elif query_type == QueryTypes.clamav:
            data = yaraify.query_clamav_signature(query, limit)
        elif query_type == QueryTypes.imphash:
            data = yaraify.query_imphash(query, limit)
        elif query_type == QueryTypes.gimphash:
            data = yaraify.query_gimphash(query, limit)
        elif query_type == QueryTypes.icon:
            data = yaraify.query_icon_dhash(query, limit)
        elif query_type == QueryTypes.tlsh:
            data = yaraify.query_tlsh(query, limit)
        elif query_type == QueryTypes.telfhash:
            data = yaraify.query_telfhash(query, limit)
        else:
            ec.print("[bold red]Currently only \"hash\" as query type is supported.[/bold red]")
            raise Exit(-1)

    if data["query_status"] != "ok":
        ec.print(f"[bold red]API returned with an error: {data['query_status']}[/bold red]")
        raise Exit(-1)

    if json:
        c.print(dumps(data, indent=4))
    else:
        data = data["data"]
        sample_list = [data] if isinstance(data, dict) else data
        for sample_dict in sample_list:
            tasks = None
            if "metadata" in sample_dict:
                tasks = sample_dict["tasks"]

            sample = Sample(**sample_dict)
            print_sample_table(sample, c)
            if tasks:
                for task in tasks:
                    if len(task["static_results"]) > 0:
                        c.print("Triggered rules: " + ", ".join([r["rule_name"] for r in task["static_results"]]))
            c.print()


@yaraify_app.command(name="recent", help="Query for recent Yara rules.")
def recent_yara(
        json: bool = Option(False, "-j", "--json", help="Output raw JSON response.")
):
    c, ec = Console(), Console(stderr=True)
    config = Config.get_instance()
    yaraify = Yaraify(config.yaraify.api_key, config.yaraify.malpedia_key)
    data = yaraify.query_recent_yara()

    if data["query_status"] != "ok":
        ec.print(f"[bold red]API returned with an error: {data['query_status']}[/bold red]")
        raise Exit(-1)

    if json:
        c.print(dumps(data, indent=4))
    else:
        data = data["data"]
        rules = [YaraRule(**r) for r in data]
        for idx, r in enumerate(rules):
            c.print(f"{idx + 1}/{len(rules)}")
            print_yararule_table(r, c)
            c.print()


@yaraify_app.command(name="get", help="Fetch Yara rule by its UUID")
def get_rule(
        uuid: str = Argument(..., help="YARAhub UUID"),
        filename: str = Argument(None, help="Filename to write Yara rule into.")
):
    c, ec = Console(), Console(stderr=True)
    config = Config.get_instance()
    yaraify = Yaraify(config.yaraify.api_key, config.yaraify.malpedia_key)
    rule = yaraify.download_yara(uuid)
    c.print(rule)
    if filename:
        with io.open(filename, "w") as fh:
            fh.write(rule)


@yaraify_app.command(name="task", help="Fetch task results")
def get_task(
        json: bool = Option(False, "-j", "--json", help="Output raw JSON response"),
        uuid: str = Argument(..., help="Task (UU)ID")
):
    c, ec = Console(), Console(stderr=True)
    config = Config.get_instance()
    yaraify = Yaraify(config.yaraify.api_key, config.yaraify.malpedia_key)
    data = yaraify.query_task(uuid)

    if data["query_status"] != "ok":
        ec.print(f"[bold red]API returned with an error: {data['query_status']}[/bold red]")
        raise Exit(-1)

    if json:
        c.print(dumps(data, indent=4))
    else:
        data = data["data"]
        if isinstance(data, str):
            if data == "queued":
                ec.print(f"[yellow]Task is currently queued.[/yellow]")
                raise Exit(0)
            else:
                ec.print(f"[bold red]API returned an unexpected string: {data}.")
                raise Exit(-1)
        task = Task(**data)
        print_task(task, c)
